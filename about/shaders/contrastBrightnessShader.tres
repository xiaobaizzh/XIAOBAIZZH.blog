[gd_resource type="Shader" format=2]

[resource]

code = "shader_type canvas_item;
uniform float brightnessFac : hint_range( -5.0, 5.0);
uniform float saturationFac :hint_range( -5.0, 5.0);
uniform float contrastFac : hint_range( -5.0, 5.0);
mat4 brightnessMatrix( float brightness )
{
	mat4 myMatr = mat4( vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0) ,vec4(0.0, 0.0, 1.0, 0.0),vec4(brightness, brightness, brightness, 1.0 ));
    return myMatr;
}

mat4 contrastMatrix( float contrast )
{
	float t = ( 1.0 - contrast ) / 2.0;
    
    return mat4( vec4(contrast, 0.0, 0.0, 0.0),
                 vec4(0.0, contrast, 0.0, 0.0),
                 vec4(0.0, 0.0, contrast, 0.0),
                 vec4(t, t, t, 1 ));

}

mat4 saturationMatrix( float saturation )
{
    vec3 luminance = vec3( 0.3086, 0.6094, 0.0820 );
    
    float oneMinusSat = 1.0 - saturation;
    
    vec3 red = vec3( luminance.x * oneMinusSat );
    red+= vec3( saturation, 0.0, 0.0 );
    
    vec3 green = vec3( luminance.y * oneMinusSat );
    green += vec3( 0.0, saturation, 0.0 );
    
    vec3 blue = vec3( luminance.z * oneMinusSat );
    blue += vec3( 0.0, 0.0, saturation );
    
    return mat4( vec4(red,     0.0),
                 vec4(green,   0.0),
                 vec4(blue,    0.0),
                 vec4(0.0, 0.0, 0.0, 1 ));
}

void fragment() {
	vec4 pixelColor = texture(SCREEN_TEXTURE,SCREEN_UV);
	COLOR = brightnessMatrix( brightnessFac ) * contrastMatrix( contrastFac ) *  saturationMatrix( saturationFac ) * pixelColor;







	//COLOR.rgb = vec3(saturation * pixelColor.rgb);
	
	//COLOR = texture(SCREEN_TEXTURE,SCREEN_UV);

		
	//COLOR = texture(SCREEN_TEXTURE,SCREEN_UV);
	//COLOR.rgba = pixelColor;
}

"
_sections_unfolded = [ "Resource" ]

